plugins {
    id 'io.github.goooler.shadow' version '8.1.7'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

//jarJar.enable()
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // this block needs to be here for runClient to exist
        }

        server {
            args '--nogui'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}




// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }



repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    implementation 'com.github.Carleslc.Simple-YAML:Simple-Yaml:1.8.4'
    implementation("net.dv8tion:JDA:5.3.2") {
        exclude module: 'opus-java'
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
shadowJar {
    mergeServiceFiles()
    //Simple-YAML
    relocate('org.simpleyaml','statusbot.org.simpleyaml')
    //JDA
    relocate('com.iwebpp.crypto', 'statusbot.com.iwebpp.crypto')
    relocate('net.dv8tion', 'statusbot.net.dv8tion')
    //Trove4j
    relocate('gnu.trove', 'statusbot.gnu.trove')
    //Okhttp
    relocate('okhttp3', 'statusbot.okhttp3')
    //Commons Collections
    relocate('org.apache.commons.collections4', 'statusbot.org.apache.commons.collections4')
    //okio-jvm
    relocate('okio','statusbot.okio')
    //nv-websocket-client
    relocate('com.neovisionaries','statusbot.com.neovisionaries')
    //jackson-...
    relocate('com.fasterxml.jackson.core','statusbot.com.fasterxml.jackson.core')
    relocate('com.fasterxml.jackson.databind','statusbot.com.fasterxml.jackson.databind')
    relocate('com.fasterxml.jackson.annotation','statusbot.com.fasterxml.jackson.annotation')
    //slf4j
    relocate('org.slf4j', 'statusbot.org.slf4j')
    //kotlin-stdlib
    relocate('kotlin', 'statusbot.kotlin')

    dependencies {
        include(dependency("com.github.Carleslc.Simple-YAML:Simple-Yaml:1.8.4"))
        include(dependency("net.dv8tion:JDA:5.3.2"))
        include(dependency("net.sf.trove4j:core:3.1.0"))
        include(dependency("com.squareup.okhttp3:okhttp:4.12.0"))
        include(dependency("org.apache.commons:commons-collections4:4.4"))
        include(dependency("com.squareup.okio:okio-jvm:3.6.0"))
        include(dependency("com.neovisionaries:nv-websocket-client:2.14"))
        include(dependency("com.fasterxml.jackson.core:jackson-databind:2.17.2"))
        include(dependency("com.fasterxml.jackson.core:jackson-core:2.17.2"))
        include(dependency("com.fasterxml.jackson.core:jackson-annotations:2.17.2"))
        include(dependency("org.slf4j:slf4j-api:2.0.13"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib:1.9.10"))
    }
}
shadowJar.finalizedBy('reobfShadowJar')
reobf {
    shadowJar{}
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
